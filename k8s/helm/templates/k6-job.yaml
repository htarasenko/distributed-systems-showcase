{{- if .Values.k6.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "distributed-systems-showcase.fullname" . }}-k6
  labels:
    {{- include "distributed-systems-showcase.labels" . | nindent 4 }}
    app.kubernetes.io/component: k6
spec:
  {{- if .Values.k6.job.concurrency }}
  concurrencyPolicy: {{ .Values.k6.job.concurrency }}
  {{- end }}
  {{- if .Values.k6.job.parallelism }}
  parallelism: {{ .Values.k6.job.parallelism }}
  {{- end }}
  {{- if .Values.k6.job.backoffLimit }}
  backoffLimit: {{ .Values.k6.job.backoffLimit }}
  {{- end }}
  {{- if .Values.k6.job.activeDeadlineSeconds }}
  activeDeadlineSeconds: {{ .Values.k6.job.activeDeadlineSeconds }}
  {{- end }}
  template:
    metadata:
      labels:
        {{- include "distributed-systems-showcase.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: k6
    spec:
      restartPolicy: Never
      containers:
        - name: k6
          image: {{ .Values.k6.image.repository }}:{{ .Values.k6.image.tag }}
          imagePullPolicy: {{ .Values.k6.image.pullPolicy }}
          command: ["k6", "run", "/scripts/script.js"]
          env:
            - name: APP_URL
              value: "http://{{ include "distributed-systems-showcase.fullname" . }}-app:{{ .Values.app.service.port }}"
          resources:
            {{- toYaml .Values.k6.resources | nindent 12 }}
          volumeMounts:
            - name: k6-scripts
              mountPath: /scripts
      volumes:
        - name: k6-scripts
          configMap:
            name: {{ include "distributed-systems-showcase.fullname" . }}-k6-scripts
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "distributed-systems-showcase.fullname" . }}-k6-scripts
  labels:
    {{- include "distributed-systems-showcase.labels" . | nindent 4 }}
    app.kubernetes.io/component: k6
data:
  script.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    import { Rate, Trend, Counter } from 'k6/metrics';

    // Custom metrics
    const errorRate = new Rate('error_rate');
    const kafkaLatency = new Trend('kafka_latency');
    const betCounter = new Counter('bets_processed');

    // Test configuration
    export const options = {
      stages: [
        { duration: '2m', target: 10 },
        { duration: '5m', target: 10 },
        { duration: '2m', target: 50 },
        { duration: '5m', target: 50 },
        { duration: '2m', target: 100 },
        { duration: '5m', target: 100 },
        { duration: '2m', target: 0 },
      ],
      thresholds: {
        http_req_duration: ['p(95)<200'],
        http_req_failed: ['rate<0.1'],
        kafka_latency: ['p(95)<50'],
        error_rate: ['rate<0.05'],
      },
    };

    const baseUrl = __ENV.APP_URL || 'http://localhost:3000';
    const userIds = [
      '550e8400-e29b-41d4-a716-446655440001',
      '550e8400-e29b-41d4-a716-446655440002',
      '550e8400-e29b-41d4-a716-446655440003',
      '550e8400-e29b-41d4-a716-446655440004',
      '550e8400-e29b-41d4-a716-446655440005',
    ];

    const gameIds = ['game-1', 'game-2', 'game-3', 'game-4', 'game-5'];
    const betTypes = ['single', 'multiple', 'system'];

    function generateBetData() {
      return {
        userId: userIds[Math.floor(Math.random() * userIds.length)],
        amount: Math.random() * 100 + 1,
        gameId: gameIds[Math.floor(Math.random() * gameIds.length)],
        betType: betTypes[Math.floor(Math.random() * betTypes.length)]
      };
    }

    export default function () {
      // Health check
      const healthResponse = http.get(`${baseUrl}/health`);
      check(healthResponse, {
        'health check status is 200': (r) => r.status === 200,
        'health check response time < 100ms': (r) => r.timings.duration < 100,
      });
      errorRate.add(healthResponse.status !== 200);

      // Place a bet
      const betData = generateBetData();
      const betResponse = http.post(`${baseUrl}/api/bet`, JSON.stringify(betData), {
        headers: { 'Content-Type': 'application/json' },
      });

      check(betResponse, {
        'bet request status is 200': (r) => r.status === 200,
        'bet response time < 200ms': (r) => r.timings.duration < 200,
        'bet response has betId': (r) => JSON.parse(r.body).betId !== undefined,
      });

      if (betResponse.status === 200) {
        betCounter.add(1);
      }
      errorRate.add(betResponse.status !== 200);

      // Get bet history
      const historyResponse = http.get(`${baseUrl}/api/bets/${betData.userId}`);
      check(historyResponse, {
        'bet history status is 200': (r) => r.status === 200,
        'bet history response time < 100ms': (r) => r.timings.duration < 100,
      });
      errorRate.add(historyResponse.status !== 200);

      // Get analytics
      const analyticsResponse = http.get(`${baseUrl}/api/analytics/bets?groupBy=hour`);
      check(analyticsResponse, {
        'analytics status is 200': (r) => r.status === 200,
        'analytics response time < 500ms': (r) => r.timings.duration < 500,
      });
      errorRate.add(analyticsResponse.status !== 200);

      sleep(Math.random() * 0.4 + 0.1);
    }
{{- end }}

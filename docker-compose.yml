version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: distributed-systems-postgres
    environment:
      POSTGRES_DB: distributed_systems
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - distributed-systems

  # ClickHouse Database
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: distributed-systems-clickhouse
    environment:
      CLICKHOUSE_DB: distributed_systems
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ""
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - distributed-systems

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: distributed-systems-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - distributed-systems

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: distributed-systems-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - distributed-systems

  # Node.js Application
  app:
    build:
      context: ./src/app
      dockerfile: Dockerfile
    container_name: distributed-systems-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/distributed_systems
      - CLICKHOUSE_URL=http://clickhouse:8123
      - KAFKA_BROKERS=kafka:29092
      - PORT=3000
    depends_on:
      - postgres
      - clickhouse
      - kafka
    volumes:
      - ./src/app:/app
      - /app/node_modules
    networks:
      - distributed-systems

  # K6 Load Testing
  k6:
    build:
      context: ./src/k6
      dockerfile: Dockerfile
    container_name: distributed-systems-k6
    depends_on:
      - app
    environment:
      - APP_URL=http://app:3000
    volumes:
      - ./src/k6:/scripts
    networks:
      - distributed-systems
    profiles:
      - testing

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: distributed-systems-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - distributed-systems

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: distributed-systems-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - distributed-systems

volumes:
  postgres_data:
  clickhouse_data:
  kafka_data:
  prometheus_data:
  grafana_data:

networks:
  distributed-systems:
    driver: bridge
